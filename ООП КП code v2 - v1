#include <iostream>
#include <vector>
#include <string>
#include <locale>
#include <cmath>
#include <stdexcept>

using namespace std;

class Client {
private:
    string name;
    string id;
    double monthSalary;

public:
    Client(const string& n, const string& i, double salary)
        : name(n), id(i), monthSalary(salary) {
        if (monthSalary <= 0) {
            throw invalid_argument("Зарплата должна быть положительной");
        }
    }

    string getName() const { return name; }
    string getId() const { return id; }
    double getMonthSalary() const { return monthSalary; }
};

class Credit {
protected:
    const Client& client;
    double amount;
    double annualRate;
    int termMonths;
    bool isApproved;

    double calculateAnnuityPayment() const {
        double monthlyRate = annualRate / 100 / 12;
        return (amount * monthlyRate) / (1 - pow(1 + monthlyRate, -termMonths));
    }

public:
    Credit(const Client& c, double amt, double rate, int term)
        : client(c), amount(amt), annualRate(rate), termMonths(term), isApproved(false) {
        if (amount <= 0 || annualRate <= 0 || termMonths <= 0) {
            throw invalid_argument("Некорректные параметры кредита");
        }
    }

    virtual ~Credit() {}

    virtual void approve() {
        if (isPaymentAffordable()) {
            isApproved = true;
        }
    }

    virtual bool isPaymentAffordable() const {
        return calculateAnnuityPayment() <= (client.getMonthSalary() * 0.4);
    }

    const Client& getClient() const { return client; }
    double getAmount() const { return amount; }
    double getRate() const { return annualRate; }
    int getTerm() const { return termMonths; }
    bool getIsApproved() const { return isApproved; }
    double getMonthlyPayment() const { return isApproved ? calculateAnnuityPayment() : 0; }
};

class CreditApplication : public Credit {
private:
    string applicationDate;
    string status;

public:
    CreditApplication(const Client& c, double amt, double rate, int term, const string& date)
        : Credit(c, amt, rate, term), applicationDate(date), status("На рассмотрении") {
    }

    void approve() override {
        if (isPaymentAffordable()) {
            Credit::approve();
            status = "Одобрена";
            cout << "Заявка одобрена. Ежемесячный платеж: " << getMonthlyPayment() << " руб." << endl;
        }
        else {
            status = "Отклонена";
            double maxAmount = calculateMaxAffordableAmount();
            cout << "Заявка отклонена. Максимальная доступная сумма: "
                << maxAmount << " руб." << endl;
        }
    }

    string getApplicationDate() const { return applicationDate; }
    string getStatus() const { return status; }

    double calculateMaxAffordableAmount() const {
        double monthlyRate = annualRate / 100 / 12;
        double maxPayment = client.getMonthSalary() * 0.4;
        return maxPayment * (1 - pow(1 + monthlyRate, -termMonths)) / monthlyRate;
    }
};

class Bank {
private:
    vector<Client> clients;
    vector<Credit*> credits;

public:
    ~Bank() {
        for (auto credit : credits) {
            delete credit;
        }
    }

    void addClient(const Client& client) {
        clients.push_back(client);
    }

    void processApplication(const Client& client, double amount, double rate, int term, const string& date) {
        try {
            CreditApplication* app = new CreditApplication(client, amount, rate, term, date);
            app->approve();
            credits.push_back(app);

            if (app->getIsApproved()) {
                cout << "Кредит выдан: " << amount << " руб. под " << rate << "% на " << term << " мес." << endl;
            }
        }
        catch (const exception& e) {
            cerr << "Ошибка обработки заявки: " << e.what() << endl;
        }
    }

    void printClientCredits(const string& clientId) const {
        cout << "\nКредиты клиента ID:" << clientId << ":" << endl;
        bool found = false;
        for (const auto& credit : credits) {
            if (credit->getClient().getId() == clientId) {
                found = true;
                cout << "- Сумма: " << credit->getAmount() << " руб."
                    << ", Ставка: " << credit->getRate() << "%"
                    << ", Срок: " << credit->getTerm() << " мес."
                    << ", Статус: " << (credit->getIsApproved() ? "Одобрен" : "Отклонен")
                    << ", Платеж: " << credit->getMonthlyPayment() << " руб./мес." << endl;
            }
        }
        if (!found) {
            cout << "У клиента нет кредитов" << endl;
        }
    }
};

int main() {
    setlocale(0, "ru");

    try {
        Bank bank;

        Client client1("Иван Иванов", "ID001", 50000);
        Client client2("Петр Петров", "ID002", 30000);
        bank.addClient(client1);
        bank.addClient(client2);

        cout << "--- Обработка заявок ---" << endl;
        bank.processApplication(client1, 200000, 12, 24, "2023-11-20");
        bank.processApplication(client1, 300000, 10, 12, "2023-11-21");
        bank.processApplication(client2, 500000, 10, 36, "2023-11-22");
        bank.processApplication(client2, 100000, 8, 12, "2023-11-23");

        cout << "\n--- Информация о кредитах ---" << endl;
        bank.printClientCredits("ID001");
        bank.printClientCredits("ID002");

    }
    catch (const exception& e) {
        cerr << "Произошла ошибка: " << e.what() << endl;
        return 1;
    }

    return 0;
}
