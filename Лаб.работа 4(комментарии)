#include <iostream>
#include <fstream>
#include <locale>
#include <string>
#include <iomanip>
#include <vector>

#define Wakey 6
#define MAX 100

using namespace std;

// Структура для хранения информации о поезде
struct Train {
    int Numr;          // Номер поезда
    char Time[6];     // Время отправления (формат чч:мм)
    char Nazn[MAX];   // Пункт назначения
    char Otpr[MAX];   // Пункт отправления
};
typedef struct Train Train_T;

// Функция для ввода строк и подсчета точек
void Tochechka() {
    string input;
    cout << "Введите строки (для окончания ввода введите строку, заканчивающуюся на 'quit'):\n";

    while (getline(cin, input)) { // Цикл, пока считывание успешно
        if (input.size() >= 4 && input.substr(input.size() - 4) == "quit") { // Проверяем на наличие 4 символов (ради quit) 
            break; // Выход из цикла
        }

        // Подсчет количества точек в строке
        int dotCount = 0;
        for (char c : input) {
            if (c == '.') {
                dotCount++; // Увеличиваем счетчик, если встречаем точку
            }
        }

        cout << "Количество точек в строке: " << dotCount << endl; // Выводим количество точек
    }
    cout << "Программа завершена." << endl;
}

// Функция для замены местами четных и нечетных строк
void SwapStr(const string& Ffile, const string& Sfile) {
    // Открываем файл на чтение
    ifstream iFile(Ffile);
    if (!iFile.is_open()) { // Проверяем, успешно ли открыт файл
        cerr << "Ошибка открытия файла для чтения." << endl;
        return;
    }

    // Считываем строки в вектор
    vector<string> lines; // Вектор для хранения строк
    string line;
    while (getline(iFile, line)) { // Считываем строки из файла
        lines.push_back(line); // Добавляем строку в вектор
    }

    // Закрываем файл после чтения
    iFile.close();

    // Проверяем, достаточно ли строк для обработки
    if (lines.size() < 30) { // Убедимся, что в файле не менее 30 строк
        cerr << "Ошибка: в файле должно быть не менее 30 строк." << endl;
        return;
    }

    // Открываем файл на запись
    ofstream oFile(Sfile);
    if (!oFile.is_open()) { // Проверяем, успешно ли открыт файл
        cerr << "Ошибка открытия файла для записи." << endl;
        return;
    }

    // Меняем местами четные и нечетные строки
    for (size_t i = 0; i < lines.size(); i += 2) { // Проходим по всем строкам с шагом 2
        // Проверяем, есть ли следующая строка
        if (i + 1 < lines.size()) { // Если следующая строка существует
            oFile << lines[i + 1] << endl; // Записываем нечетную строку
        }
        oFile << lines[i] << endl; // Записываем четную строку
    }

    // Закрываем файл после записи
    oFile.close();
    
    cout << "Чётные и нечётные строки успешно поменялись местами" << endl; // Подтверждение успешного выполнения
}

// Функция для добавления поездов и поиска поезда по пункту назначения
void Vagon() {
    Train trains[Wakey]; // Массив для хранения информации о поездах
    int Train_count = 0; // Счетчик добавленных поездов
    char searchNazn[MAX]; // Переменная для хранения пункта назначения для поиска

    // Добавление поездов
    while (Train_count < Wakey) { // Цикл для ввода информации о поездах
        cout << "Введите номер поезда (или -1 для завершения ввода): ";
        cin >> trains[Train_count].Numr; // Ввод номера поезда
        if (trains[Train_count].Numr == -1) { // Проверка на завершение ввода
            break;
        }

        cout << "Время отправления (чч:мм): ";
        cin >> trains[Train_count].Time; // Ввод времени отправления

        cout << "Введите название пункта назначения : ";
        cin >> trains[Train_count].Nazn; // Ввод названия пункта назначения

        cout << "Введите название пункта отправления: ";
        cin >> trains[Train_count].Otpr; // Ввод названия пункта отправления

        cout << endl; // Переход на новую строку для удобства
        Train_count++; // Увеличиваем счетчик поездов
    }

    // Поиск поезда по пункту назначения
    cout << "Введите пункт назначения для поиска: ";
    cin >> searchNazn; // Ввод пункта назначения для поиска

    int search = 0; // Счетчик найденных поездов
    cout << "Поезда, направляющиеся в " << searchNazn << ":\n";
    for (int i = 0; i < Train_count; i++) { // Проходим по всем введенным поездам
        if (strcmp(trains[i].Nazn, searchNazn) == 0) { // Сравниваем с введенным пунктом назначения
            cout << "Номер поезда: " << trains[i].Numr << ", "
                << "Время отправления: " << trains[i].Time << ", "
                << "Пункт отправления: " << trains[i].Otpr << endl; // Выводим информацию о поезде
            search++; // Увеличиваем счетчик найденных поездов
        }
    }

    if (search == 0) { // Если поезда не найдены
        cout << "Поездов, направляющихся в " << searchNazn << ", нет." << endl; // Сообщение об отсутствии поездов
    }
}

int main() {
    setlocale(LC_CTYPE, "RUS"); // Установка локали для корректного отображения русских символов

    cout << endl << "Пункт 1" << endl;
    Tochechka(); // Вызов функции для ввода строк и подсчета точек

    cout << endl << "Пункт 2" << endl;
    SwapStr("TESTbefore.txt", "TESTafter.txt"); // Вызов функции для замены местами строк в файле

    cout << endl << "Пункт 3" << endl;
    Vagon(); // Вызов функции для добавления поездов и поиска поезда

    return 0; // Завершение программы
}
