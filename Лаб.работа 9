#include <iostream>
#include <cstddef>
#include <utility>
#include <type_traits>

// Упражнение 1: Шаблонный класс Array с оператором присваивания
template <typename T>
class Array {
private:
    T* data_;
    size_t size_;

public:
    explicit Array(size_t size = 0, const T& value = T()) : size_(size) {
        data_ = new T[size_];
        for (size_t i = 0; i < size_; ++i) {
            data_[i] = value;
        }
    }

    Array(const Array& other) : size_(other.size_) {
        data_ = new T[size_];
        for (size_t i = 0; i < size_; ++i) {
            data_[i] = other.data_[i];
        }
    }

    ~Array() {
        delete[] data_;
    }

    Array& operator=(const Array& other) {
        if (this != &other) {
            delete[] data_;
            size_ = other.size_;
            data_ = new T[size_];
            for (size_t i = 0; i < size_; ++i) {
                data_[i] = other.data_[i];
            }
        }
        return *this;
    }

    T& operator[](size_t idx) {
        return data_[idx];
    }

    const T& operator[](size_t idx) const {
        return data_[idx];
    }

    size_t size() const {
        return size_;
    }
};

// Упражнение 2: Array без оператора присваивания для T
template <typename T>
class ArrayNoAssign {
private:
    char* buffer_;
    size_t size_;

public:
    explicit ArrayNoAssign(size_t size = 0, const T& value = T()) : size_(size) {
        buffer_ = new char[size_ * sizeof(T)];
        for (size_t i = 0; i < size_; ++i) {
            new (buffer_ + i * sizeof(T)) T(value);
        }
    }

    ArrayNoAssign(const ArrayNoAssign& other) : size_(other.size_) {
        buffer_ = new char[size_ * sizeof(T)];
        for (size_t i = 0; i < size_; ++i) {
            new (buffer_ + i * sizeof(T)) T(other[i]);
        }
    }

    ~ArrayNoAssign() {
        for (size_t i = 0; i < size_; ++i) {
            reinterpret_cast<T*>(buffer_ + i * sizeof(T))->~T();
        }
        delete[] buffer_;
    }

    T& operator[](size_t idx) {
        return *reinterpret_cast<T*>(buffer_ + idx * sizeof(T));
    }

    const T& operator[](size_t idx) const {
        return *reinterpret_cast<const T*>(buffer_ + idx * sizeof(T));
    }

    size_t size() const {
        return size_;
    }
};

// Упражнение 3: ValueHolder с ICloneable
struct ICloneable {
    virtual ICloneable* clone() const = 0;
    virtual ~ICloneable() {}
};

template <typename T>
struct ValueHolder : ICloneable {
    T data_;

    explicit ValueHolder(const T& value) : data_(value) {}

    ICloneable* clone() const override {
        return new ValueHolder(data_);
    }
};

// Упражнение 4: Функция copy_n
template <typename T, typename U>
void copy_n(T* dest, U* src, size_t n) {
    for (size_t i = 0; i < n; ++i) {
        dest[i] = static_cast<T>(src[i]);
    }
}

// Упражнение 5: Функция minimum
template <typename T, typename Comparator>
T minimum(const Array<T>& arr, Comparator comp) {
    if (arr.size() == 0) throw std::invalid_argument("Empty array");

    T min_val = arr[0];
    for (size_t i = 1; i < arr.size(); ++i) {
        if (comp(arr[i], min_val)) {
            min_val = arr[i];
        }
    }
    return min_val;
}

// Упражнение 6: Функция flatten
template <typename T>
void flatten(const T& value, std::ostream& out) {
    out << value << " ";
}

template <typename T>
void flatten(const Array<T>& arr, std::ostream& out) {
    for (size_t i = 0; i < arr.size(); ++i) {
        flatten(arr[i], out);
    }
}

// Упражнение 7: Класс Any
class Any {
private:
    ICloneable* holder_;

public:
    Any() : holder_(nullptr) {}

    template <typename T>
    Any(const T& value) : holder_(new ValueHolder<T>(value)) {}

    Any(const Any& other) : holder_(other.holder_ ? other.holder_->clone() : nullptr) {}

    ~Any() {
        delete holder_;
    }

    Any& operator=(const Any& other) {
        if (this != &other) {
            delete holder_;
            holder_ = other.holder_ ? other.holder_->clone() : nullptr;
        }
        return *this;
    }


    template <typename T>
    T* cast() {
        ValueHolder<T>* vh = dynamic_cast<ValueHolder<T>*>(holder_);
        return vh ? &vh->data_ : nullptr;
    }
};

// Упражнение 8: Шаблон SameType
template <typename T, typename U>
struct SameType {
    static const bool value = false;
};

template <typename T>
struct SameType<T, T> {
    static const bool value = true;
};

// Упражнение 9: Функция array_size
template <typename T, size_t N>
size_t array_size(T(&array)[N]) {
    return N;
}

// Тестовый класс Student для демонстрации
class Student {
private:
    std::string name_;
    int recordBookNumber_;

public:
    Student() : name_(""), recordBookNumber_(0) {}
    Student(const std::string& name, int number) : name_(name), recordBook-Number_(number) {}

    friend std::ostream& operator<<(std::ostream& os, const Student& s) {
        return os << s.name_ << " (" << s.recordBookNumber_ << ")";
    }
};

int main() {
    // Тестирование упражнения 1
    Array<int> intArr(5, 42);
    std::cout << "Int array size: " << intArr.size() << std::endl;

    // Тестирование упражнения 2
    ArrayNoAssign<Student> studentArr(2, Student("Ivan", 12345));
    std::cout << "Student array size: " << studentArr.size() << std::endl;

    // Тестирование упражнения 3
    ValueHolder<int> vh(42);
    ICloneable* clone = vh.clone();
    delete clone;

    // Тестирование упражнения 4
    int ints[] = { 1, 2, 3 };
    double doubles[3] = {};
    copy_n(doubles, ints, 3);
    std::cout << "Copied doubles: ";
    for (auto d : doubles) std::cout << d << " ";
    std::cout << std::endl;

    // Тестирование упражнения 5
    Array<int> arr(3);
    arr[0] = 3; arr[1] = 1; arr[2] = 2;
    std::cout << "Min: " << minimum(arr, [](int a, int b) { return a < b; }) << std::endl;

    // Тестирование упражнения 6
    Array<Array<int>> nestedArr(2, arr);
    std::cout << "Flattened: ";
    flatten(nestedArr, std::cout);
    std::cout << std::endl;

    // Тестирование упражнения 7
    Any any(10);
    int* val = any.cast<int>();
    std::cout << "Any value: " << (val ? *val : 0) << std::endl;

    // Тестирование упражнения 8
    std::cout << "SameType<int, double>: " << SameType<int, double>::value << std::endl;
    std::cout << "SameType<int, int>: " << SameType<int, int>::value << std::endl;

    // Тестирование упражнения 9
    float floats[] = { 1.1f, 2.2f, 3.3f };
    std::cout << "Array size: " << array_size(floats) << std::endl;

    return 0;
}
