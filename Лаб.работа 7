#include <cassert> 
#include <iostream>
#include <string> 
#include <cmath>
#include <vector>
#include <iomanip>
#include <locale.h>

using namespace std;

// Часть 1 | Проверка Expression, Number, BinaryOperation
struct Expression
{
    virtual ~Expression() = default;
    virtual double evaluate() const = 0;
};

struct Number : Expression
{
    Number(double value) : value_(value) {}
    double value() const { return value_; }
    double evaluate() const override { return value_; }
private:
    double value_;
};

struct BinaryOperation : Expression
{
    enum {
        PLUS = '+',
        MINUS = '-',
        DIV = '/',
        MUL = '*'
    };
    BinaryOperation(Expression const* left, int op, Expression const* right)
        : left_(left), op_(op), right_(right)
    {
        assert(left_ && right_);
    }
    ~BinaryOperation()
    {
        delete left_;
        delete right_;
    }
    Expression const* left() const { return left_; }
    Expression const* right() const { return right_; }
    int operation() const { return op_; }
    double evaluate() const override
    {
        double left = left_->evaluate();
        double right = right_->evaluate();
        switch (op_)
        {
        case PLUS: return left + right;
        case MINUS: return left - right;
        case DIV: return left / right;
        case MUL: return left * right;
        }
        assert(0);
        return 0.0;
    }
private:
    Expression const* left_;
    Expression const* right_;
    int op_;
};

// Часть 2 | Проверка FunctionCall
struct FunctionCall : Expression
{
    FunctionCall(const string& name, Expression const* arg)
        : name_(name), arg_(arg)
    {
        assert(arg_);
        assert(name_ == "sqrt" || name_ == "abs");
    }

    ~FunctionCall()
    {
        delete arg_;
    }

    string const& name() const
    {
        return name_;
    }

    Expression const* arg() const
    {
        return arg_;
    }

    double evaluate() const override
    {
        double value = arg_->evaluate();
        if (name_ == "sqrt")
        {
            assert(value >= 0);
            return sqrt(value);
        }
        else if (name_ == "abs")
        {
            return fabs(value);
        }
        assert(false);
        return 0.0;
    }

private:
    string name_;
    Expression const* arg_;
};

// Часть 3 | Класс Passenger
class Passenger {
public:
    virtual ~Passenger() = default;
    virtual string Type() const = 0;
    virtual double Fare() const = 0;
    virtual bool Ticket() const = 0;
};

class TicPassenger : public Passenger {
public:
    string Type() const override { return "Пассажир с билетом"; }
    double Fare() const override { return 50.0; }
    bool Ticket() const override { return true; }
};

class SeasonPassenger : public Passenger {
public:
    string Type() const override { return "Пассажир с льготной сезонкой"; }
    double Fare() const override { return 30.0; }
    bool Ticket() const override { return true; }
};

class TransCardPassenger : public Passenger {
    string cardType;
public:
    TransCardPassenger(const string& type) : cardType(type) {}

    string Type() const override {
        return "Транспортная карта (" + cardType + ")";
    }
    double Fare() const override {
        if (cardType == "студент") return 20.0;
        if (cardType == "пенсионер") return 15.0;
        return 35.0; // Обычная карта
    }
    bool Ticket() const override { return true; }
};

class nopayPassenger : public Passenger {
public:
    string Type() const override { return "Заяц (безбилетник)"; }
    double Fare() const override { return 0.0; }
    bool Ticket() const override { return false; }
};

void displayPassengers(const vector<Passenger*>& passengers) {
    const int typeCountSize = 6; // Количество типов пассажиров
    string types[typeCountSize] = { 
        "Пассажир с билетом", 
        "Пассажир с льготной сезонкой", 
        "Транспортная карта (студент)", 
        "Транспортная карта (пенсионер)", 
        "Транспортная карта (обычный)", 
        "Заяц (безбилетник)" 
    };
    int count[typeCountSize] = { 0 }; // Количество пассажиров отдельного типа
    double revenue[typeCountSize] = { 0.0 }; // Выручка за отдельный тип пассажиоров
    double totRevenue = 0.0; // Вся выручка

    // Собираем статистику
    for (auto passenger : passengers) {
        string type = passenger->Type();
        double fare = passenger->Fare();
        totRevenue += fare;

        for (int i = 0; i < typeCountSize; ++i) {
            if (type == types[i]) {
                count[i]++;
                revenue[i] += fare;
                break;
            }
        }
    }

    // Выводим результаты
    cout << "=== Статистика пассажиров в час пик ===" << endl;
    cout << left << setw(35) << "Тип пассажира"
        << setw(10) << "Кол-во"
        << "Выручка" << endl;
    cout << "-----------------------------------------------------" << endl;

    for (int i = 0; i < typeCountSize; ++i) {
        cout << setw(35) << types[i]
            << setw(10) << count[i]
            << revenue[i] << " руб." << endl;
    }

    cout << "-----------------------------------------------------" << endl;
    cout << setw(35) << "ИТОГО:"
        << setw(10) << passengers.size()
        << totRevenue << " руб." << endl;
}

int main() {
    setlocale(0, "ru");

    // Часть 1
    Expression* e1 = new Number(1.234);
    Expression* e2 = new Number(-1.234);
    Expression* e3 = new  BinaryOperation(e1, BinaryOperation::DIV, e2);
    cout << "Результат деления: " << e3->evaluate() << endl << endl;   
    delete e3;

    // Часть 2
    Expression* n32 = new Number(32.0);
    Expression* n16 = new Number(16.0);
    Expression* minus = new BinaryOperation(n32, BinaryOperation::MINUS, n16);
    Expression* callSqrt = new FunctionCall("sqrt", minus);
    Expression* n2 = new Number(2.0);
    Expression* mult = new BinaryOperation(n2, BinaryOperation::MUL, callSqrt);
    Expression* callAbs = new FunctionCall("abs", mult);
    cout << "Результат вычисления: " << callAbs->evaluate() << endl << endl;
    delete callAbs;

    // Часть 3 
    vector<Passenger*> passengers = {
      new TicPassenger(),
      new SeasonPassenger(),
      new TransCardPassenger("студент"),
      new TransCardPassenger("пенсионер"),
      new TransCardPassenger("обычный"),
      new nopayPassenger(),
      new TicPassenger(),
      new TransCardPassenger("студент"),
      new TransCardPassenger("студент"),
      new nopayPassenger()
    };

    displayPassengers(passengers);

    // Очищаем память
    for (auto passenger : passengers) {
        delete passenger;
    }  
}
