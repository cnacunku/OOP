#include <iostream>
#include <vector>
#include <string>
#include <locale>
#include <cmath>

using namespace std;

class Client {
private:
    string name;
    string id;
    double monthSalary;

public:
    Client(string n, string i, double salary)
        : name(n), id(i), monthSalary(salary) {
    }

    string getName() const { return name; }
    string getId() const { return id; }
    double getMonthSalary() const { return monthSalary; }
};

class Credit {
private:
    Client client;
    double amount;
    double rate;
    int term;
    bool approved;

public:
    Credit(Client c, double a, double r, int t)
        : client(c), amount(a), rate(r), term(t), approved(false) {
    }

    void approve() { approved = true; }
    bool isApproved() const { return approved; }

    // ежемесячный аннуитетный платёж
    double calculateMonthlyPayment() const {
        if (!approved) return 0;
        double monthlyRate = rate / 100 / 12; // месячная ставка
        return (amount * monthlyRate) / (1 - pow(1 + monthlyRate, -term)); // месячный платёж
    }

    Client getClient() const { return client; }
    double getAmount() const { return amount; }
};

class CreditApplication {
private:
    Client client;
    double requestedAmount;
    int term;
    bool isApproved;

    bool isPaymentAffordable(double monthlyPayment) const {
        return monthlyPayment <= (client.getMonthSalary() * 0.4);
    }

public:
    CreditApplication(Client c, double amount, int t)
        : client(c), requestedAmount(amount), term(t), isApproved(false) {
    }

    bool checkCreditworthiness(double annualRate = 10.0) { // Ставка 10% годовых по умолчанию
        double monthlyRate = annualRate / 100 / 12;
        double monthlyPayment = (requestedAmount * monthlyRate) / (1 - pow(1 + monthlyRate, -term));
        isApproved = isPaymentAffordable(monthlyPayment);
        return isApproved;
    }

    double getMaxAllowedAmount() const {
        return client.getMonthSalary() * 0.4 * term;
    }

    Client getClient() const { return client; }
    double getRequestedAmount() const { return requestedAmount; }
    int getTerm() const { return term; }
    bool getIsApproved() const { return isApproved; }
};

class Bank {
private:
    vector<Client> clients;
    vector<Credit> credits;
    vector<CreditApplication> applications;

public:
    void addClient(Client c) { clients.push_back(c); }      
    void addCredit(Credit c) { credits.push_back(c); }

    void processApplication(CreditApplication& app) {
        if (app.checkCreditworthiness()) {
            Credit credit(app.getClient(), app.getRequestedAmount(), 10.0, app.getTerm());
            credit.approve();
            credits.push_back(credit);
            cout << "Кредит одобрен для " << app.getClient().getName() << endl;
        }
        else {
            cout << "Отказ. Максимальная доступная сумма: "
                << app.getMaxAllowedAmount() << " руб." << endl;
        }
    }
};

int main() {
    setlocale(0, "ru");

    Bank bank;
    Client client("Иван Иванов", "12345", 50000.0); // Зарплата: 50 000 руб.
    bank.addClient(client);

    CreditApplication app(client, 300000, 12); // Заявка: 300 000 руб. на 1 год
    bank.processApplication(app);

    return 0;
}
