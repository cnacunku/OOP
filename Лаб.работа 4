#include <iostream>
#include <fstream>
#include <locale>
#include <string>
#include <iomanip>
#include <vector>

#define Wakey 6
#define MAX 100


using namespace std;

struct Train {
    int Numr;
    char Time[6];
    char Nazn[MAX];
    char Otpr[MAX];
};
typedef struct Train Train_T;


void Tochechka() {
    string input;
    cout << "Введите строки (для окончания ввода введите строку, заканчивающуюся на 'quit'):\n";

    while (getline(cin, input)) { // Цикл, пока считывание успешно
        if (input.size() >= 4 && input.substr(input.size() - 4) == "quit") { // Проверяем на наличие 4 символов (ради quit) 
            break; // Выход из цикла
        }

        // Подсчет количества точек в строке
        int dotCount = 0;
        for (char c : input) {
            if (c == '.') {
                dotCount++;
            }
        }

        cout << "Количество точек в строке: " << dotCount << endl;
    }
    cout << "Программа завершена." << endl;
}

// Функция для замены местами четных и нечетных строк
void SwapStr(const string& Ffile, const string& Sfile) {
    // Открываем файл на чтение
    ifstream iFile(Ffile);
    if (!iFile.is_open()) {
        cerr << "Ошибка открытия файла для чтения." << endl;
        return;
    }

    // Считываем строки в вектор
    vector<string> lines;
    string line;
    while (getline(iFile, line)) {
        lines.push_back(line);
    }

    // Закрываем файл после чтения
    iFile.close();

    // Проверяем, достаточно ли строк для обработки
    if (lines.size() < 30) {
        cerr << "Ошибка: в файле должно быть не менее 30 строк." << endl;
        return;
    }

    // Открываем файл на запись
    ofstream oFile(Sfile);
    if (!oFile.is_open()) {
        cerr << "Ошибка открытия файла для записи." << endl;
        return;
    }

    // Меняем местами четные и нечетные строки
    for (size_t i = 0; i < lines.size(); i += 2) {
        // Проверяем, есть ли следующая строка
        if (i + 1 < lines.size()) {
            oFile << lines[i + 1] << endl; // Записываем нечетную строку
        }
        oFile << lines[i] << endl; // Записываем четную строку
    }

    // Закрываем файл после записи
    oFile.close();
    
    cout << "Чётные и нечётные строки успешно помемянись местами" << endl;

}

void Vagon() {
    Train trains[Wakey];
    int Train_count = 0;
    char searchNazn[MAX];

    // Добавление поездов
    while (Train_count < Wakey) {
        cout << "Введите номер поезда (или -1 для завершения ввода): ";
        cin >> trains[Train_count].Numr;
        if (trains[Train_count].Numr == -1) {
            break;
        }

        cout << "Время отправления (чч:мм): ";
        cin >> trains[Train_count].Time;

        cout << "Введите название пункта назначения: ";
        cin >> trains[Train_count].Nazn;

        cout << "Введите название пункта отправления: ";
        cin >> trains[Train_count].Otpr;

        cout << endl;
        Train_count++;
    }

    // Поиск поезда по пункту назначения
    cout << "Введите пункт назначения для поиска: ";
    cin >> searchNazn;

    int search = 0;
    cout << "Поезда, направляющиеся в " << searchNazn << ":\n";
    for (int i = 0; i < Train_count; i++) {
        if (strcmp(trains[i].Nazn, searchNazn) == 0) {
            cout << "Номер поезда: " << trains[i].Numr << ", "
                << "Время отправления: " << trains[i].Time << ", "
                << "Пункт отправления: " << trains[i].Otpr << endl;
            search++;
        }
    }

    if (search == 0) {
        cout << "Поездов, направляющихся в " << searchNazn << ", нет." << endl;
    }
}

int main() {
    setlocale(LC_CTYPE, "RUS");

    cout << endl << "Пункт 1" << endl;
    Tochechka();

    cout << endl << "Пункт 2" << endl;
    SwapStr("TESTbefore.txt", "TESTafter.txt");

    cout << endl << "Пункт 3" << endl;
    Vagon();

    return 0;
}
